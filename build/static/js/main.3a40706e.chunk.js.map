{"version":3,"sources":["chat/BotMessage.js","chat/UserMessage.js","chat/ChatMessageList.js","chatRequest.js","App.js","index.js"],"names":["BotMessage","chatMessage","blockStyle","display","marginLeft","padding","borderRadius","className","from","style","paddingTop","paddingBottom","backgroundColor","height","width","textAlign","icon","robotHappyOutline","color","fontSize","message","id","UserMessage","boyLightSkinTone","ChatMessageList","chatMessages","map","postChatRequest","bodyFormData","FormData","append","Promise","resolve","reject","axios","method","url","BASE_URL","data","headers","then","res","catch","err","stat","msg","App","useState","uuidv4","setChatMessages","messageToSendRef","useRef","handleChatFunction","e","console","log","currentMessage","current","value","currentMessages","resp","reply","marginRight","marginTop","overflow","border","outline","ref","type","placeholder","autoFocus","onKeyDown","key","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a40706e.chunk.js","sourcesContent":["import React from 'react'\n// npm install --save-dev @iconify/react @iconify-icons/mdi\nimport { Icon, InlineIcon } from '@iconify/react';\nimport robotHappyOutline from '@iconify-icons/mdi/robot-happy-outline';\n\nexport default function BotMessage({chatMessage}) {\n\n    const style = {\n        paddingTop: \"10px\",\n        paddingBottom: \"10px\"\n    }\n\n    const blockStyle = {\n        display: \"inline-block\",\n        marginLeft: \"10px\",\n        padding: \"15px\",\n        borderRadius: \"25px\"\n    }\n\n    const messageStyle = {\n        backgroundColor: \"#1F3472\",\n        color: \"white\",\n        fontSize: \"30px\"\n    }\n\n    const icon = {\n        backgroundColor: \"white\",\n        height: \"20px\",\n        width: \"20px\",\n        textAlign:\"center\"\n    }\n\n    return (\n            <div key={chatMessage.id} className={chatMessage.from} style={style}>\n                <div>\n                    <p style={{...blockStyle, ...icon}}>\n                        <Icon icon={robotHappyOutline} />\n                    </p>\n                    <p style={{...blockStyle, ...messageStyle}}>{chatMessage.message}</p>\n                </div>\n            </div>\n    )   \n}\n","import React from 'react'\n// npm install --save-dev @iconify/react @iconify-icons/emojione\nimport { Icon, InlineIcon } from '@iconify/react';\nimport boyLightSkinTone from '@iconify-icons/emojione/boy-light-skin-tone';\n\nexport default function UserMessage({chatMessage}) {\n\n    const style = {\n        textAlign: \"right\",\n        paddingTop: \"10px\",\n        paddingBottom: \"10px\"\n    }\n\n    const blockStyle = {\n        display: \"inline-block\",\n        marginLeft: \"10px\",\n        padding: \"15px\",\n        borderRadius: \"25px\"\n    }\n\n    const messageStyle = {\n        backgroundColor: \"#44486F\",\n        color: \"white\",\n        fontSize: \"30px\"\n    }\n\n    const icon = {\n        backgroundColor: \"white\",\n        height: \"20px\",\n        width: \"20px\",\n        textAlign:\"center\"\n    }\n\n\n    return (\n            <div key={chatMessage.id} className={chatMessage.from} style={style}>\n                <div>\n                    <p style={{...blockStyle, ...messageStyle}}>{chatMessage.message}</p>\n                    <p style={{...blockStyle, ...icon}}>\n                        <Icon icon={boyLightSkinTone} />\n                    </p>\n                </div>\n            </div>\n    )   \n}\n","import React from 'react'\nimport BotMessage from './BotMessage'\nimport UserMessage from './UserMessage'\n\nexport default function ChatMessageList({chatMessages}) {\n\n    return chatMessages.map(\n        chatMessage => {\n            if (chatMessage.from === \"user\") {\n                return <UserMessage chatMessage={chatMessage} />\n            }\n\n            // else chatbot\n            return <BotMessage chatMessage={chatMessage} />\n\n        }\n    )\n}\n","import axios from \"axios\";\n\nconst BASE_URL = \"https://chatboy2020.herokuapp.com\"\n// const BASE_URL = \"http://localhost:8080\" // uncomment this for local development\n\nlet postChatRequest = (message) => {\n\n\tlet bodyFormData = new FormData();\n\tbodyFormData.append('content', message);\n\n    return new Promise((resolve, reject) => {\n        axios({\n\t\t\tmethod: \"post\",\n\t\t\turl: BASE_URL + \"/chat\",\n\t\t\tdata: bodyFormData,\n\t\t\theaders: {'Content-Type': 'multipart/form-data' }\n\t\t})\n\t\t.then(res => {\n\t\t\tresolve(res.data);\n\t\t})\n\t\t.catch(err => {\n\t\t\t\treject({\n\t\t\t\t\tstat: 500,\n\t\t\t\t\tmsg:\n\t\t\t\t\t\t\"There was an error processing your request. Please, try again later.\"\n\t\t\t\t});\n\t\t});\n    });\n}\n\nexport default postChatRequest;","import './App.css';\nimport React, { useState , useRef } from 'react';\nimport ChatMessageList from './chat/ChatMessageList'\nimport { v4 as uuidv4 } from 'uuid';\nimport postChatRequest from './chatRequest'\n\nfunction App() {\n\n\tconst [chatMessages, setChatMessages] = useState([\n\t\t{id: uuidv4(), from: \"chatbot\", message: \"Hello there! How can I help?\"},\n\t])\n\n\tconst messageToSendRef = useRef()\n\n\tfunction handleEnter(e){\n\t\tif (e.key === 'Enter') {\n\t\t\thandleChatFunction(e)\n\t\t}\n\t}\n\n\tfunction handleChatFunction(e) {\n\t\tconsole.log(\"[handleChatFunction]\")\n\n\t\tconst currentMessage = messageToSendRef.current.value\n\t\tif (currentMessage === '') {\n\t\t\tconsole.log(\"[handleChatFunction] Blank Chat Message\")\n\t\t\treturn \n\t\t}\n\n\t\tconsole.log(`[handleChatFunction] ${currentMessage}`) // `This is ${soMany} times easier!`\n\n\t\t// talk to chatbot // POST http://localhost:8080/chat\n\t\t// form data containing : content: currentMessage\n\t\t\n\t\tsetChatMessages(currentMessages => {\n\t\t\treturn [...currentMessages, \n\t\t\t\t{id: uuidv4(), from: \"user\", message: currentMessage}\n\t\t\t]\n\t\t})\n\n\t\tpostChatRequest(currentMessage).then(resp => {\n\t\t\tsetChatMessages(currentMessages => {\n\t\t\t\treturn [...currentMessages, \n\t\t\t\t\t{id: uuidv4(), from: \"chatbot\", message: resp.reply}\n\t\t\t\t]\n\t\t\t})\n\t\t})\n\n\t\tmessageToSendRef.current.value = null\n\n\t}\n\n\tconst appStyle = {\n\t\tmarginLeft: \"20%\",\n\t\tmarginRight: \"20%\",\n\t}\n\n\tconst chatStyle = {\n\t\tmarginTop: \"5%\",\n\t\tpaddingTop: \"30px\",\n\t\theight: \"600px\", \n\t\tpadding: \"10px\",\n\t\tdisplay: \"block\",\n\t\toverflow:\"scroll\",\n\t\tbackgroundColor: \"#878CD6\"\n\t}\n\n\tconst inputStyle = {\n\t\tborder: \"none\",\n\t\theight: \"50px\",\n\t\twidth: \"80%\",\n\t\toutline:\"none\",\n\t\tfontSize: \"30px\"\n\t}\n\n\tconst buttonStyle = {\n\t\theight: \"50px\",\n\t\twidth: \"20%\",\n\t\toutline:\"none\",\n\t\tfontSize: \"30px\"\n\t}\n\n\t// Visual Layout\n\treturn (\n\t\t<div className=\"App\" style={appStyle}>\n\t\t\t<div style={chatStyle}>\n\t\t\t\t<ChatMessageList chatMessages={chatMessages}/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input \n\t\t\t\t\tstyle={inputStyle} ref={messageToSendRef} type=\"text\" placeholder=\"Chat with me!\" autoFocus \n\t\t\t\t\tonKeyDown={handleEnter}\n\t\t\t\t/>\n\t\t\t\t<button style={buttonStyle} onClick={handleChatFunction}>Chat</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />,document.getElementById('root'));"],"sourceRoot":""}